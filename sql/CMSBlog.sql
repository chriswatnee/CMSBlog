DROP DATABASE IF EXISTS CMSBlog;

CREATE DATABASE CMSBlog;

USE CMSBlog;

-- User

CREATE TABLE IF NOT EXISTS `User`
(
	UserID INT NOT NULL AUTO_INCREMENT,
	Username VARCHAR(20) NOT NULL,
	`Password` VARCHAR(100) NOT NULL,
	Enabled TINYINT(1) NOT NULL,
	FirstName VARCHAR(30) NOT NULL,
	LastName VARCHAR(30) NOT NULL,
	PRIMARY KEY (UserID),
	KEY Username (Username)
);

CREATE TABLE IF NOT EXISTS Authority (
	Username VARCHAR(20) NOT NULL,
	Authority VARCHAR(20) NOT NULL,
	KEY Username (Username)
);

ALTER TABLE Authority
ADD CONSTRAINT fk_Authority_Username
FOREIGN KEY (Username) REFERENCES `User` (Username);

-- Post, Category, Status, and Tag

CREATE TABLE Post
(
	PostID INT NOT NULL AUTO_INCREMENT,
	Title VARCHAR(50) NOT NULL,
	Content LONGTEXT NOT NULL,
	Excerpt TEXT NOT NULL,
    CreationDate DATE NOT NULL,
    LiveDate DATE NOT NULL,
    ExpirationDate DATE NULL,
	UserID INT NOT NULL,
    CategoryID INT NOT NULL,
    StatusID INT NOT NULL,
	PRIMARY KEY (PostID)
);

CREATE TABLE Category
(
	CategoryID INT NOT NULL AUTO_INCREMENT,
	`Name` VARCHAR(50) NOT NULL,
	PRIMARY KEY (CategoryID)
);

CREATE TABLE `Status`
(
	StatusID INT NOT NULL AUTO_INCREMENT,
	`Name` VARCHAR(50) NOT NULL,
	PRIMARY KEY (StatusID)
);

CREATE TABLE Tag
(
	TagID INT NOT NULL AUTO_INCREMENT,
	`Name` VARCHAR(50) NOT NULL,
	PRIMARY KEY (TagID)
);

CREATE TABLE PostTag
(
	PostID INT NOT NULL,
	TagID INT NOT NULL,
	PRIMARY KEY (PostID, TagID)
);

ALTER TABLE Post
ADD CONSTRAINT fk_Post_Category
FOREIGN KEY (CategoryID) REFERENCES Category(CategoryID) ON DELETE NO ACTION;

ALTER TABLE Post
ADD CONSTRAINT fk_Post_Status
FOREIGN KEY (StatusID) REFERENCES `Status`(StatusID) ON DELETE NO ACTION;

ALTER TABLE PostTag
ADD CONSTRAINT fk_PostTag_Post
FOREIGN KEY (PostID) REFERENCES Post(PostID) ON DELETE NO ACTION;

ALTER TABLE PostTag
ADD CONSTRAINT fk_PostTag_Tag
FOREIGN KEY (TagID) REFERENCES Tag(TagID) ON DELETE NO ACTION;

-- Page, Status, and Navigation

CREATE TABLE `Page`
(
	PageID INT NOT NULL AUTO_INCREMENT,
	Title VARCHAR(50) NOT NULL,
	Content LONGTEXT NOT NULL,
    StatusID INT NOT NULL,
	PRIMARY KEY (PageID)
);

CREATE TABLE Navigation
(
	NavigationID INT NOT NULL AUTO_INCREMENT,
	Section VARCHAR(50) NOT NULL,
	PRIMARY KEY (NavigationID)
);

CREATE TABLE NavigationPage
(
	NavigationID INT NOT NULL,
	PageID INT NOT NULL,
	PRIMARY KEY (NavigationID, PageID)
);

ALTER TABLE `Page`
ADD CONSTRAINT fk_Page_Status
FOREIGN KEY (StatusID) REFERENCES `Status`(StatusID) ON DELETE NO ACTION;

ALTER TABLE NavigationPage
ADD CONSTRAINT fk_NavigationPage_Navigation
FOREIGN KEY (NavigationID) REFERENCES Navigation(NavigationID) ON DELETE NO ACTION;

ALTER TABLE NavigationPage
ADD CONSTRAINT fk_NavigationPage_Page
FOREIGN KEY (PageID) REFERENCES `Page`(PageID) ON DELETE NO ACTION;

-- Image

CREATE TABLE Image
(
	ImageID INT NOT NULL AUTO_INCREMENT,
	`Name` VARCHAR(50) NOT NULL,
	PRIMARY KEY (ImageID)
);